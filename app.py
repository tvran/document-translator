import os
import streamlit as st
import zipfile
from lxml import etree
from pdf2docx import Converter
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer, pipeline
from dotenv import load_dotenv
import traceback
import sys

# Streamlit configuration to avoid PyTorch error
st.set_option('server.fileWatcherType', 'none')

# Load environment variables
load_dotenv()

def print_debug(message):
    """Print debug message to both console and streamlit"""
    print(message, file=sys.stderr)
    st.write(message)

@st.cache_resource
def load_translation_model():
    """Load Tilmash translation model with Hugging Face token"""
    print_debug("üìö –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
    try:
        hf_token = os.getenv('HF_TOKEN')
        if not hf_token:
            print_debug("‚ùå HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            st.error("Hugging Face —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HF_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
            st.stop()
        
        print_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
        model = AutoModelForSeq2SeqLM.from_pretrained("issai/tilmash", token=hf_token)
        print_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä...")
        tokenizer = AutoTokenizer.from_pretrained("issai/tilmash", token=hf_token)
        print_debug("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return pipeline("translation", model=model, tokenizer=tokenizer, 
                        src_lang="rus_Cyrl", tgt_lang="kaz_Cyrl", max_length=1000)
    except Exception as e:
        print_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        print_debug(f"Traceback: {traceback.format_exc()}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        st.stop()

def pdf_to_docx(pdf_path, docx_path):
    """Convert PDF to DOCX"""
    print_debug(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF: {pdf_path} -> {docx_path}")
    try:
        cv = Converter(pdf_path)
        print_debug("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
        cv.convert(docx_path, start=0, end=None, continuous=True)
        cv.close()
        if os.path.exists(docx_path):
            print_debug(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {docx_path}")
            return docx_path
        else:
            print_debug("‚ùå –§–∞–π–ª DOCX –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            raise Exception("–§–∞–π–ª DOCX –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF: {str(e)}")
        print_debug(f"Traceback: {traceback.format_exc()}")
        raise

def translate_text(tilmash_pipeline, text):
    """Translate text using Tilmash model"""
    try:
        if not text.strip():
            return text
        print_debug(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç: {text[:50]}...")
        result = tilmash_pipeline(text)[0]['translation_text']
        print_debug(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result[:50]}...")
        return result
    except Exception as e:
        print_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        print_debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        print_debug(f"Traceback: {traceback.format_exc()}")
        raise

def translate_docx(tilmash_pipeline, docx_path, output_path, source_lang='rus', target_lang='kaz'):
    """Translate DOCX file while preserving formatting"""
    print_debug(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {docx_path}")
    try:
        # Modify pipeline based on translation direction
        if source_lang == 'kaz':
            tilmash_pipeline.tokenizer.src_lang = "kaz_Cyrl"
            tilmash_pipeline.tokenizer.tgt_lang = "rus_Cyrl"
        else:
            tilmash_pipeline.tokenizer.src_lang = "rus_Cyrl"
            tilmash_pipeline.tokenizer.tgt_lang = "kaz_Cyrl"

        print_debug("üîÑ –ß–∏—Ç–∞–µ–º DOCX —Ñ–∞–π–ª...")
        with zipfile.ZipFile(docx_path, "r") as docx:
            xml_content = docx.read("word/document.xml")
        
        print_debug("üîÑ –ü–∞—Ä—Å–∏–º XML...")
        tree = etree.fromstring(xml_content)
        
        print_debug("üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
        # Translate only text within <w:t> tags without breaking styles
        for elem in tree.iter("{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t"):
            original_text = elem.text
            if original_text and len(original_text.strip()) > 0:
                elem.text = translate_text(tilmash_pipeline, original_text)
        
        print_debug("üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
        # Save new DOCX
        with zipfile.ZipFile(output_path, "w") as docx:
            for item in zipfile.ZipFile(docx_path, "r").infolist():
                if item.filename == "word/document.xml":
                    docx.writestr(item.filename, etree.tostring(tree, encoding="utf-8"))
                else:
                    docx.writestr(item.filename, zipfile.ZipFile(docx_path, "r").read(item.filename))
        
        print_debug(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return output_path
    except Exception as e:
        print_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        print_debug(f"Traceback: {traceback.format_exc()}")
        raise

def main():
    st.title("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Tilmash")
    
    print_debug("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # Check for HF_TOKEN in environment
    if 'HF_TOKEN' not in os.environ:
        print_debug("‚ö†Ô∏è HF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        st.warning("‚ö†Ô∏è Hugging Face —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HF_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    
    # Load translation model
    tilmash_pipeline = load_translation_model()
    
    # Language selection
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")
    source_lang = st.sidebar.selectbox(
        "–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", 
        ["–†—É—Å—Å–∫–∏–π", "–ö–∞–∑–∞—Ö—Å–∫–∏–π"], 
        index=0
    )
    
    # File upload
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", 
        type=['pdf', 'docx']
    )
    
    if uploaded_file is not None:
        print_debug(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_file.name}")
        
        # Determine source and target languages
        is_rus_to_kaz = source_lang == "–†—É—Å—Å–∫–∏–π"
        source = 'rus' if is_rus_to_kaz else 'kaz'
        target = 'kaz' if is_rus_to_kaz else 'rus'
        
        try:
            # Save uploaded file
            print_debug("üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
            with open(uploaded_file.name, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # Prepare output filename
            output_filename = f"translated_{uploaded_file.name}"
            
            # Convert PDF to DOCX if needed
            if uploaded_file.name.lower().endswith('.pdf'):
                print_debug("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω PDF —Ñ–∞–π–ª, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
                temp_docx = "temp_converted.docx"
                pdf_to_docx(uploaded_file.name, temp_docx)
                input_file = temp_docx
            else:
                input_file = uploaded_file.name
            
            # Translation button
            if st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç"):
                print_debug("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞...")
                try:
                    # Translate the document
                    translated_path = translate_docx(
                        tilmash_pipeline, 
                        input_file, 
                        output_filename, 
                        source, 
                        target
                    )
                    
                    print_debug("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                    # Provide download button
                    with open(translated_path, "rb") as file:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                            data=file.read(),
                            file_name=output_filename,
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    
                    st.success("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω!")
                    print_debug("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # Clean up temporary files
                    print_debug("üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
                    if uploaded_file.name.lower().endswith('.pdf'):
                        os.remove(temp_docx)
                    os.remove(uploaded_file.name)
                    
                except Exception as e:
                    print_debug(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
                    print_debug(f"Traceback: {traceback.format_exc()}")
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        
        except Exception as e:
            print_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            print_debug(f"Traceback: {traceback.format_exc()}")
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

if __name__ == "__main__":
    main()